                         Chapter - 5  (ARRAys)

Arrays are variable which can hold more than one value.
Const fruits = ["apple", "banana", "cherry"]
Const a1 = [7, "jack", false]
                        |-->can be different type

Accessing values
let numbers = [1, 2, 7, 9]
numbers[0] = 1
numbers[1] = 2

Finding the length
let numbers = [1,7,9,21]
               0 1  2  3
numbers[0] = 1
numbers.length = 4

Changing the values
let numbers = [1,7,9,21]
numbers[2] = 8
           |-->"numbers" new becomes [7,2,8,9] arrays are mutable
                Arrays can be changed
In javascript, arrays are objects The typeof operator on arrays returns object.
Const n = [1,7,9]
typeof n -->return "object"
Arrays can hold many values under a single name 

Arrays methods There are some important array methods in javascript some of them are as follows:
1. tostring() --> converts an array to a string of comma separated values
         let n = [1,7,9]
         n.toString() --> "1,7,9"

2. join() --> joins all the array elements using a separator
         let n = [1,7,9]
         n.join("-") --> 1-7-9

3. pop() --> removes last element from the array
               let n = [1,2,4]
               n.pop() --> 4 (last element (4) will be deleted in arrays)

4. push() --> adds an element at the end of the array
                let a = [7, 1, 2,8]
                a.push(9) --> [7,1,2,8,9]
                a.length() --> 5

5. shift() --> removes the first element from the array
let a = [7, 1, 2,8]
a.shift() --> 7 (first element (7) will be deleted in arrays)

6. unshift() --> adds an element at the beginning returns new array length.
let a = [7, 1, 2,8]
a.unshift(9) --> [9,7,1,2,8]

7. concat() --> used to join arrays to the given arrays
let a = [7, 1, 2,8]
let b = [9, 3, 4, 5]
a.concat(b) --> [7,1,2,8,9,3,4,5]

8. slice() --> slices out a piece from an array It creates a new array
                Const num = [1, 2, 3, 4]
                num.slice(1, 3) --> [2,3]
                num.slice(2) --> [3,4]

9. splice() --> splice can be used to add new items to an array
               const num = [1, 2, 3, 4]

                                |-->elements to be added
               num.splice(1, 0, 5) --> [1,5,2,3,4]
returns deleted items<-|  |  |-> no. of elements to remove
 modifies the array       |->position to add

10. sort() --> sort() method is used to sort an array alphabetically
                       let a = [7, 9, 8]
                       a.sort() --> [7,8,9] -> a changes to [7,8,9] 
                                              [modifies the original array ]
sort() takes an optional compare function. If this function is provided as the first argument,
the sort() function will consider these values (the values returned from the compare function)
 as the basis of sorting

11. delete() --> Array elements can be deleted using the delete operator
                   let d = [7, 8, 9, 10]
                   delete d[1] --> delete is an operator 

12. reverse() --> Reverses the elements in the surce array.
let a = [7, 9, 8]
a.reverse() --> [8,9,7]

Looping through Arrays
Arrays can be looped through using the classical javascript for loop or through some Other
methods discussed below
1. forEach loop --> calls a function, once for each array element
         const a = [1, 2, 3]
         a.forEach((value, index, array) ==> {
            //function logic
            });

2. map() --> Creates a new array by performing some operation on each array element.
              const a = [1, 2, 3]
              a.map((value, index, array) ==> {
                //function logic
                return value * value;
                });

3. filter() --> Filters an array with values that passes a test.creates a new array 
                      const a = [1, 2, 3, 4, 5]
                      a.filter(greater_than_5)

4. reduce method --> Reduces an array to a single value.
               const n = [1, 8, 7, 11]
               let sum = n.reduce(add)
                    |->1+8+7+11    |-->A functions

5. Array.from --> used to create an array from any other object
           Array from("Harry")

6. for of --> for-of loop can be used to get the values from an array

7. for-in --> for-in loop  can be used to get the keys from an array